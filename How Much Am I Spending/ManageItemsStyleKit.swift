//
//  ManageItemsStyleKit.swift
//  How Much Am I Spending
//
//  Created by Shayne Torres on 9/13/16.
//  Copyright (c) 2016 . All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class ManageItemsStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let mainGreen: UIColor = UIColor(red: 0.427, green: 0.859, blue: 0.071, alpha: 1.000)
        static let mainOrange: UIColor = UIColor(red: 0.996, green: 0.804, blue: 0.024, alpha: 1.000)
        static let mainGray: UIColor = UIColor(red: 0.929, green: 0.929, blue: 0.929, alpha: 1.000)
    }

    //// Colors

    public class var mainGreen: UIColor { return Cache.mainGreen }
    public class var mainOrange: UIColor { return Cache.mainOrange }
    public class var mainGray: UIColor { return Cache.mainGray }

    //// Drawing Methods

    public class func drawIncreaseQuantityButton(frame frame: CGRect = CGRect(x: 1, y: 1, width: 53, height: 53)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let color = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: frame.minX + 4, y: frame.minY + 4, width: 45, height: 45))
        color.setFill()
        ovalPath.fill()
        ManageItemsStyleKit.mainGreen.setStroke()
        ovalPath.lineWidth = 4
        ovalPath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: frame.minX + 26.42, y: frame.minY + 10.73))
        bezierPath.addLineToPoint(CGPoint(x: frame.minX + 26.42, y: frame.minY + 42.42))
        bezierPath.lineCapStyle = .Round;

        ManageItemsStyleKit.mainOrange.setStroke()
        bezierPath.lineWidth = 4
        bezierPath.stroke()


        //// Bezier 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 10.73, frame.minY + 26.58)
        CGContextRotateCTM(context, -90 * CGFloat(M_PI) / 180)

        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPoint(x: 0, y: 0))
        bezier2Path.addLineToPoint(CGPoint(x: 0, y: 31.69))
        bezier2Path.lineCapStyle = .Round;

        ManageItemsStyleKit.mainOrange.setStroke()
        bezier2Path.lineWidth = 4
        bezier2Path.stroke()

        CGContextRestoreGState(context)
    }

    public class func drawDecreaseQuantityButton(frame frame: CGRect = CGRect(x: 1, y: 1, width: 53, height: 53)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let color = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: frame.minX + 4, y: frame.minY + 4, width: 45, height: 45))
        color.setFill()
        ovalPath.fill()
        ManageItemsStyleKit.mainGreen.setStroke()
        ovalPath.lineWidth = 4
        ovalPath.stroke()


        //// Group 2
        //// Bezier 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, frame.minX + 10.73, frame.minY + 26.58)
        CGContextRotateCTM(context, -90 * CGFloat(M_PI) / 180)

        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPoint(x: 0, y: 0))
        bezier2Path.addLineToPoint(CGPoint(x: 0, y: 31.69))
        bezier2Path.lineCapStyle = .Round;

        ManageItemsStyleKit.mainOrange.setStroke()
        bezier2Path.lineWidth = 4
        bezier2Path.stroke()

        CGContextRestoreGState(context)
    }

    public class func drawSaveItemButton(frame frame: CGRect = CGRect(x: 5, y: 5, width: 90, height: 90)) {
        //// Color Declarations
        let clear = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.000)


        //// Subframes
        let group: CGRect = CGRect(x: frame.minX + floor(frame.width * 0.05556 + 0.5), y: frame.minY + floor(frame.height * 0.05556 + 0.5), width: floor(frame.width * 0.94444 + 0.5) - floor(frame.width * 0.05556 + 0.5), height: floor(frame.height * 0.94444 + 0.5) - floor(frame.height * 0.05556 + 0.5))


        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: group.minX + floor(group.width * 0.00000 + 0.5), y: group.minY + floor(group.height * 0.00000 + 0.5), width: floor(group.width * 1.00000 + 0.5) - floor(group.width * 0.00000 + 0.5), height: floor(group.height * 1.00000 + 0.5) - floor(group.height * 0.00000 + 0.5)))
        clear.setFill()
        ovalPath.fill()
        ManageItemsStyleKit.mainGreen.setStroke()
        ovalPath.lineWidth = 4
        ovalPath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: group.minX + 0.51250 * group.width, y: group.minY + 0.10004 * group.height))
        bezierPath.addCurveToPoint(CGPoint(x: group.minX + 0.51250 * group.width, y: group.minY + 0.50000 * group.height), controlPoint1: CGPoint(x: group.minX + 0.51250 * group.width, y: group.minY + 0.10000 * group.height), controlPoint2: CGPoint(x: group.minX + 0.51250 * group.width, y: group.minY + 0.30333 * group.height))
        bezierPath.addLineToPoint(CGPoint(x: group.minX + 0.88750 * group.width, y: group.minY + 0.50000 * group.height))
        bezierPath.addLineToPoint(CGPoint(x: group.minX + 0.88750 * group.width, y: group.minY + 0.51250 * group.height))
        bezierPath.addLineToPoint(CGPoint(x: group.minX + 0.51250 * group.width, y: group.minY + 0.51250 * group.height))
        bezierPath.addCurveToPoint(CGPoint(x: group.minX + 0.51250 * group.width, y: group.minY + 0.86250 * group.height), controlPoint1: CGPoint(x: group.minX + 0.51250 * group.width, y: group.minY + 0.69216 * group.height), controlPoint2: CGPoint(x: group.minX + 0.51250 * group.width, y: group.minY + 0.86250 * group.height))
        bezierPath.addLineToPoint(CGPoint(x: group.minX + 0.50000 * group.width, y: group.minY + 0.86250 * group.height))
        bezierPath.addCurveToPoint(CGPoint(x: group.minX + 0.50000 * group.width, y: group.minY + 0.51250 * group.height), controlPoint1: CGPoint(x: group.minX + 0.50000 * group.width, y: group.minY + 0.86250 * group.height), controlPoint2: CGPoint(x: group.minX + 0.50000 * group.width, y: group.minY + 0.69216 * group.height))
        bezierPath.addLineToPoint(CGPoint(x: group.minX + 0.12500 * group.width, y: group.minY + 0.51250 * group.height))
        bezierPath.addLineToPoint(CGPoint(x: group.minX + 0.12500 * group.width, y: group.minY + 0.50000 * group.height))
        bezierPath.addLineToPoint(CGPoint(x: group.minX + 0.50000 * group.width, y: group.minY + 0.50000 * group.height))
        bezierPath.addCurveToPoint(CGPoint(x: group.minX + 0.50000 * group.width, y: group.minY + 0.10000 * group.height), controlPoint1: CGPoint(x: group.minX + 0.50000 * group.width, y: group.minY + 0.30333 * group.height), controlPoint2: CGPoint(x: group.minX + 0.50000 * group.width, y: group.minY + 0.10000 * group.height))
        bezierPath.addLineToPoint(CGPoint(x: group.minX + 0.51250 * group.width, y: group.minY + 0.10000 * group.height))
        bezierPath.addLineToPoint(CGPoint(x: group.minX + 0.51250 * group.width, y: group.minY + 0.10004 * group.height))
        bezierPath.closePath()
        clear.setFill()
        bezierPath.fill()
        ManageItemsStyleKit.mainGreen.setStroke()
        bezierPath.lineWidth = 4
        bezierPath.stroke()
    }

    public class func drawCancelButton(frame frame: CGRect = CGRect(x: 5, y: 5, width: 90, height: 90)) {
        //// Color Declarations
        let clear = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.000)

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: frame.minX + floor(frame.width * 0.05556 + 0.5), y: frame.minY + floor(frame.height * 0.05556 + 0.5), width: floor(frame.width * 0.94444 + 0.5) - floor(frame.width * 0.05556 + 0.5), height: floor(frame.height * 0.94444 + 0.5) - floor(frame.height * 0.05556 + 0.5)))
        clear.setFill()
        ovalPath.fill()
        ManageItemsStyleKit.mainOrange.setStroke()
        ovalPath.lineWidth = 4
        ovalPath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: frame.minX + 0.25646 * frame.width, y: frame.minY + 0.24075 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.50000 * frame.width, y: frame.minY + 0.48429 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.25644 * frame.width, y: frame.minY + 0.24073 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.37889 * frame.width, y: frame.minY + 0.36318 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.72451 * frame.width, y: frame.minY + 0.25977 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.60404 * frame.width, y: frame.minY + 0.38024 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.70512 * frame.width, y: frame.minY + 0.27917 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.72785 * frame.width, y: frame.minY + 0.25644 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.72670 * frame.width, y: frame.minY + 0.25759 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.72785 * frame.width, y: frame.minY + 0.25644 * frame.height))
        bezierPath.addLineToPoint(CGPoint(x: frame.minX + 0.73570 * frame.width, y: frame.minY + 0.26430 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.50786 * frame.width, y: frame.minY + 0.49214 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.73570 * frame.width, y: frame.minY + 0.26430 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.62362 * frame.width, y: frame.minY + 0.37638 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.73570 * frame.width, y: frame.minY + 0.71999 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.62362 * frame.width, y: frame.minY + 0.60790 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.73570 * frame.width, y: frame.minY + 0.71999 * frame.height))
        bezierPath.addLineToPoint(CGPoint(x: frame.minX + 0.72785 * frame.width, y: frame.minY + 0.72785 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.50000 * frame.width, y: frame.minY + 0.50000 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.72785 * frame.width, y: frame.minY + 0.72785 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.61576 * frame.width, y: frame.minY + 0.61576 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.25644 * frame.width, y: frame.minY + 0.74356 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.37889 * frame.width, y: frame.minY + 0.62111 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.25644 * frame.width, y: frame.minY + 0.74356 * frame.height))
        bezierPath.addLineToPoint(CGPoint(x: frame.minX + 0.24858 * frame.width, y: frame.minY + 0.73570 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.49214 * frame.width, y: frame.minY + 0.49214 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.24858 * frame.width, y: frame.minY + 0.73570 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.37103 * frame.width, y: frame.minY + 0.61325 * frame.height))
        bezierPath.addCurveToPoint(CGPoint(x: frame.minX + 0.24858 * frame.width, y: frame.minY + 0.24858 * frame.height), controlPoint1: CGPoint(x: frame.minX + 0.37103 * frame.width, y: frame.minY + 0.37103 * frame.height), controlPoint2: CGPoint(x: frame.minX + 0.24858 * frame.width, y: frame.minY + 0.24858 * frame.height))
        bezierPath.addLineToPoint(CGPoint(x: frame.minX + 0.25644 * frame.width, y: frame.minY + 0.24073 * frame.height))
        bezierPath.addLineToPoint(CGPoint(x: frame.minX + 0.25646 * frame.width, y: frame.minY + 0.24075 * frame.height))
        bezierPath.closePath()
        clear.setFill()
        bezierPath.fill()
        ManageItemsStyleKit.mainOrange.setStroke()
        bezierPath.lineWidth = 4
        bezierPath.stroke()
    }

    //// Generated Images

    public class func imageOfIncreaseQuantityButton(frame frame: CGRect = CGRect(x: 1, y: 1, width: 53, height: 53)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            ManageItemsStyleKit.drawIncreaseQuantityButton(frame: CGRect(x: 0, y: 0, width: frame.size.width, height: frame.size.height))

        let imageOfIncreaseQuantityButton = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfIncreaseQuantityButton
    }

    public class func imageOfDecreaseQuantityButton(frame frame: CGRect = CGRect(x: 1, y: 1, width: 53, height: 53)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            ManageItemsStyleKit.drawDecreaseQuantityButton(frame: CGRect(x: 0, y: 0, width: frame.size.width, height: frame.size.height))

        let imageOfDecreaseQuantityButton = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfDecreaseQuantityButton
    }

    public class func imageOfSaveItemButton(frame frame: CGRect = CGRect(x: 5, y: 5, width: 90, height: 90)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            ManageItemsStyleKit.drawSaveItemButton(frame: CGRect(x: 0, y: 0, width: frame.size.width, height: frame.size.height))

        let imageOfSaveItemButton = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfSaveItemButton
    }

    public class func imageOfCancelButton(frame frame: CGRect = CGRect(x: 5, y: 5, width: 90, height: 90)) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            ManageItemsStyleKit.drawCancelButton(frame: CGRect(x: 0, y: 0, width: frame.size.width, height: frame.size.height))

        let imageOfCancelButton = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return imageOfCancelButton
    }

}
